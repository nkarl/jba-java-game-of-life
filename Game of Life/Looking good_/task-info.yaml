type: edu
custom_name: Looking good!
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    import life.engine.Life;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            int N = scanner.nextInt();
            int S = scanner.nextInt();
            int M = scanner.nextInt();
            Life world = new Life(N, S);

            world.propagate(M);
            world.view();

            scanner.close();
        }
    }
  learner_created: false
- name: src/test.javaBAK
  visible: true
  learner_created: false
- name: src/myLifeTest.py
  visible: true
  learner_created: false
- name: bin/main/test.javaBAK
  visible: true
  learner_created: false
- name: src/life/engine/Life.javaBAK
  visible: true
  learner_created: false
- name: bin/main/life/engine/Life.javaBAK
  visible: true
  learner_created: false
- name: bin/main/life/engine/Life$1.class
  visible: true
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import life.GameOfLife;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class GameOfLifeTest extends SwingTest {

        public GameOfLifeTest() {
            super(new GameOfLife());
        }

        @SwingComponent(name = "GenerationLabel")
        JLabelFixture generationLabel;

        @SwingComponent(name = "AliveLabel")
        JLabelFixture aliveLabel;

        @DynamicTest(order = 1)
        CheckResult testWindow() {
            requireVisible(window);
            return correct();
        }

        @DynamicTest(order = 2)
        CheckResult testGenerationLabel() {
            requireEnabled(generationLabel);
            requireVisible(generationLabel);
            return correct();
        }

        @DynamicTest(order = 3)
        CheckResult testAliveLabel() {
            requireEnabled(aliveLabel);
            requireVisible(aliveLabel);
            return correct();
        }

        @DynamicTest(order = 4)
        CheckResult testForInteger() {

            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(generationLabel.text());

            if (!matcher.find()) {
                return wrong("The 'GenerationLabel' doesn't contain an integer number!");
            }

            matcher = pattern.matcher(aliveLabel.text());

            if (!matcher.find()) {
                return wrong("The 'AliveLabel' doesn't contain an integer number!");
            }

            return correct();
        }
    }
  learner_created: false
- name: src/life/Model.java
  visible: true
  text: |
    package life;

    public abstract class Model {

        int size;
        int[][] map;

        Model(int size) {
            this.size = size;
            this.map = new int[size][size];
        }
    }
  learner_created: true
- name: src/life/Life.java
  visible: true
  text: |
    package life;

    import java.io.IOException;
    import java.util.Random;

    public class Life extends Model {

        int numAlive;
        // Constructor: with seed
        public Life(int size, int seed) {
            super(size);

            Random random = new Random(seed);
            for (int i = 0; i < this.size; ++i) {
                for (int j = 0; j < this.size; ++j) {
                    this.map[i][j] = random.nextBoolean() ? 1 : 0;
                }
            }
        }

        // Constructor: without seed
        public Life(int size) {
            super(size);

            Random random = new Random();
            for (int i = 0; i < this.size; ++i) {
                for (int j = 0; j < this.size; ++j) {
                    this.map[i][j] = random.nextBoolean() ? 1 : 0;
                }
            }
        }

        // propagate forward <gens> generations
        public void propagate(int gens) {
    //        Thread thread = new Thread(new Runnable() {
    //            public void run() {
    //                generate();
    //                view();
    //                try {
    //                    Thread.sleep((long) (0.5 * 1000));
    //                } catch (InterruptedException e) {
    //                    e.printStackTrace();
    //                }
    //            }
    //        });
            for (int i = 0; i < gens; ++i) {
                generate();
                System.out.println("Generations #" + i);
                System.out.println("Alive: " + this.numAlive);
                view();
                // apply Thread and Callback here
    //            thread.start();
                try {
                    if (System.getProperties().contains("Windows"))
                        new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
                    else
                        Runtime.getRuntime().exec("clear");
                } catch (IOException | InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        // generate a new future from the current generation
        private void generate() {
            // create a new model of the next generation
            Model future = new Model(this.size) {};

            this.numAlive = 0;
            // check every cell for its survival conditions
            for (int row = 0; row < this.size; ++row) {
                for (int col = 0; col < this.size; ++col) {
                    int neighbors = neighbors(row, col);
                    if (neighbors == 3) {
                        future.map[row][col] = 1;
                    } else if (neighbors == 2) {
                        future.map[row][col] = this.map[row][col];
                    } else {
                        future.map[row][col] = 0;
                    }
                    this.numAlive += (future.map[row][col] == 1) ? 1 : 0;
                }
            }
            this.map = future.map;
        }

        // count the number of neighbors around a cell
        private int neighbors(int row, int col) {
            int count = 0;
            for (int i = -1; i < 2; ++i) {
                for (int j = -1; j < 2; ++j) {
                    if (i == 0 && j == 0) continue;
                    count += checkIndex(row + i, col + j);
                }
            }
            return count;
        }

        // check and wrap the out-of-bound indices
        private int checkIndex(int row, int col) {
            int MAX = this.size - 1;
            if (row < 0) row = MAX;
            if (row > MAX) row = 0;
            if (col < 0) col = MAX;
            if (col > MAX) col = 0;
            return this.map[row][col] == 1 ? 1 : 0;
        }

        // view method
        public void view() {
            for (int i = 0; i < this.size; ++i) {
                for (int j = 0; j < this.size; ++j) {
                    if (this.map[i][j] == 1)
                        System.out.print('O');
                    else
                        System.out.print(' ');
                }
                System.out.println();
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/298/implement#comment
status: Solved
record: 3
